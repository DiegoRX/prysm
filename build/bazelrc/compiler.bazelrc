
# Compile with gcc by default
build --config=gcc

# Add a generic alias if the user doesn't care about the exact version.
build:clang --config=clang14
build:gcc --config=gcc11

build:clang11 --platform_suffix=clang11
build:clang11 --//:requested_compiler_flag=clang11
build:clang14 --platform_suffix=clang14
build:clang14 --//:requested_compiler_flag=clang14
build:gcc10 --platform_suffix=gcc10
build:gcc10 --//:requested_compiler_flag=gcc10
build:gcc10 --features=static_libstdcxx
build:gcc11 --platform_suffix=gcc11
build:gcc11 --//:requested_compiler_flag=gcc11
build:gcc11 --features=static_libstdcxx
build:gcc12 --platform_suffix=gcc12
build:gcc12 --//:requested_compiler_flag=gcc12
build:gcc12 --features=static_libstdcxx

# Required to use the C/C++ toolchain managed by gcc-toolchain
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build --incompatible_enable_cc_toolchain_resolution

build:asan --copt -fsanitize=address,undefined
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address,undefined
build:asan --copt -fno-sanitize=vptr,function
build:asan --linkopt -fno-sanitize=vptr,function
build:asan --copt -DADDRESS_SANITIZER=1
build:asan --copt -D__SANITIZE_ADDRESS__
build:asan --linkopt -ldl

# Build binary with cgo symbolizer for debugging / profiling.
build:cgo_symbolizer --config=clang
build:cgo_symbolizer --copt=-g
build:cgo_symbolizer --define=USE_CGO_SYMBOLIZER=true
build:cgo_symbolizer -c dbg
build:cgo_symbolizer --define=gotags=cgosymbolizer_enabled

# toolchain build debug configs
#------------------------------
build:debug --sandbox_debug
build:debug --toolchain_resolution_debug
build:debug --verbose_failures
build:debug -s
